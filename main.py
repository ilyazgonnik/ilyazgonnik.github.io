from fastapi import FastAPI, Request, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List, Dict
import requests
import os
from dotenv import load_dotenv

load_dotenv()

app = FastAPI()

origins = [
    "https://www.aifetish.xyz",  # –†–∞–∑—Ä–µ—à–∏—Ç–µ –≤–∞—à –ø—Ä–æ–¥–∞–∫—à–µ–Ω-–¥–æ–º–µ–Ω
    "http://localhost:8000",  # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    "http://127.0.0.1:5500",   # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
]

app.add_middleware(
    CORSMiddleware,
    #allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –∂–∞–Ω—Ä–æ–≤
GENRE_PROMPTS = {
    "comedy": {
        "name": "–ö–æ–º–µ–¥–∏—è",
        "prompt": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –≤ –∫–æ–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∏–ª—å–º–∞—Ö...",
        "emoji": "üòÇ"
    },
    "horror": {
        "name": "–£–∂–∞—Å—ã", 
        "prompt": "–¢—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Ö–æ—Ä—Ä–æ—Ä-—Ñ–∏–ª—å–º–∞–º...",
        "emoji": "üëª"
    },
    "drama": {
        "name": "–î—Ä–∞–º–∞",
        "prompt": "–¢—ã –∑–Ω–∞—Ç–æ–∫ –¥—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–∏–Ω–æ...",
        "emoji": "üé≠"
    },
    "sci_fi": {
        "name": "–ù–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞",
        "prompt": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –Ω–∞—É—á–Ω–æ–π —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–µ...",
        "emoji": "üöÄ"
    },
    "action": {
        "name": "–ë–æ–µ–≤–∏–∫",
        "prompt": "–¢—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –±–æ–µ–≤–∏–∫–∞–º...",
        "emoji": "üí•"
    }
}

class ChatMessage(BaseModel):
    role: str
    content: str

class ChatRequest(BaseModel):
    messages: List[ChatMessage]
    enabled_genres: List[str]

class StartChatRequest(BaseModel):
    enabled_genres: List[str]

def create_system_prompt(enabled_genres: List[str]) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç"""
    if not enabled_genres:
        return "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ñ–∏–ª—å–º–∞–º. –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –∫–∏–Ω–æ."
    
    base_prompt = "–¢—ã –∫–∏–Ω–æ–ø–æ–º–æ—â–Ω–∏–∫ —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –∂–∞–Ω—Ä–∞—Ö:\n\n"
    
    for genre in enabled_genres:
        if genre in GENRE_PROMPTS:
            base_prompt += f"‚Ä¢ {GENRE_PROMPTS[genre]['prompt']}\n\n"
    
    base_prompt += "–°–æ—á–µ—Ç–∞–π —Å—Ç–∏–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤ –≤ —Å–≤–æ–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö. "
    base_prompt += "–û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –∂–∞–Ω—Ä–æ–≤—ã–º–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º–∏."
    
    return base_prompt

@app.post("/api/chat/start")
async def start_chat(request: StartChatRequest):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –∂–∞–Ω—Ä–∞–º–∏"""
    try:
        if not request.enabled_genres:
            raise HTTPException(status_code=400, detail="No genres selected")
        
        system_prompt = create_system_prompt(request.enabled_genres)
        
        return {
            "success": True,
            "system_prompt": system_prompt,
            "enabled_genres": request.enabled_genres,
            "message": f"–ß–∞—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å {len(request.enabled_genres)} –∂–∞–Ω—Ä–∞–º–∏"
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/chat")
async def chat(request: ChatRequest):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —á–∞—Ç–∞"""
    try:
        system_prompt = create_system_prompt(request.enabled_genres)
        
        messages_with_system = [
            {"role": "system", "content": system_prompt}
        ] + [msg.dict() for msg in request.messages]
        
        response = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers={
                "Authorization": f"Bearer {os.getenv('OPENROUTER_API_KEY')}",
                "HTTP-Referer": "https://aifetish.xyz",
                "X-Title": "Film AI Assistant",
                "Content-Type": "application/json"
            },
            json={
                "model": "cognitivecomputations/dolphin-mistral-24b-venice-edition:free",
                "messages": messages_with_system,
                "temperature": 0.7,
                "max_tokens": 1000
            },
            timeout=30
        )
        
        if response.status_code != 200:
            raise HTTPException(status_code=response.status_code, 
                              detail=f"OpenRouter API error: {response.text}")
        
        response_data = response.json()
        ai_response = response_data['choices'][0]['message']['content']
        
        return {"response": ai_response}
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/genres")
async def get_genres_info():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∂–∞–Ω—Ä–∞—Ö"""
    return {
        "available_genres": {
            genre: {
                "name": info["name"],
                "emoji": info["emoji"],
                "description": info["prompt"][:100] + "..."
            }
            for genre, info in GENRE_PROMPTS.items()
        }
    }

@app.get("/api/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã API"""
    return {"status": "ok", "message": "API is working"}