from contextlib import asynccontextmanager
import random
import uuid
from fastapi import FastAPI, Request, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List, Dict, Optional
import requests
import os
from dotenv import load_dotenv
from pathlib import Path 
import sqlite3
import json
from datetime import datetime, timedelta
load_dotenv()


# ‚úÖ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è Render.com
DB_PATH = os.path.join(os.getenv('HOME', ''), 'data', 'chats.db')

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ—Ç
Path(os.path.dirname(DB_PATH)).mkdir(exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
     """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏ –¥–ª—è –º–∞–ª–æ–π –ø–∞–º—è—Ç–∏"""
     conn = sqlite3.connect(DB_PATH)
     c = conn.cursor()
    
     # –í–∫–ª—é—á–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –º–∞–ª–æ–π –ø–∞–º—è—Ç–∏
     c.execute("PRAGMA journal_mode = WAL")  # –õ—É—á—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
     c.execute("PRAGMA synchronous = NORMAL")  # –ë–∞–ª–∞–Ω—Å —Å–∫–æ—Ä–æ—Å—Ç—å/–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å
     c.execute("PRAGMA cache_size = -2000")  # –ö–µ—à 2MB –≤–º–µ—Å—Ç–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö 2GB
    
     c.execute('''CREATE TABLE IF NOT EXISTS sessions
                 (session_id TEXT PRIMARY KEY,
                  selected_genres TEXT,
                  messages TEXT,
                  created_at TEXT,
                  last_activity TEXT)''')
    
     # –ò–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
     c.execute('''CREATE INDEX IF NOT EXISTS idx_last_activity 
                 ON sessions(last_activity)''')
    
     conn.commit()
     conn.close()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
def save_session(session_id, data):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('''INSERT OR REPLACE INTO sessions 
                 VALUES (?, ?, ?, ?, ?)''',
              (session_id,
               json.dumps(data['selected_genres']),
               json.dumps(data['messages']),
               data['created_at'],
               data['last_activity']))
    conn.commit()
    conn.close()

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–∏
def load_session(session_id):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('SELECT * FROM sessions WHERE session_id = ?', (session_id,))
    row = c.fetchone()
    conn.close()
    
    if row:
        return {
            'selected_genres': json.loads(row[1]),
            'messages': json.loads(row[2]),
            'created_at': row[3],
            'last_activity': row[4]
        }
    return None

# –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
def delete_session(session_id):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('DELETE FROM sessions WHERE session_id = ?', (session_id,))
    conn.commit()
    conn.close()


@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    init_db()
    #print("Database initialized")
    yield
    # Shutdown
    # –ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

app = FastAPI(lifespan=lifespan)


origins = [
    "https://ilyazgonnik.github.io",  # URL –≤–∞—à–µ–≥–æ GitHub Pages —Å–∞–π—Ç–∞
    "http://localhost:8000",  # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
]

app.add_middleware(
    CORSMiddleware,
    allow_origins = ["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)







# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –∂–∞–Ω—Ä–æ–≤
GENRE_PROMPTS = {
    "comedy": {
        "name": "–ö–æ–º–µ–¥–∏—è",
        "prompt": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –≤ –∫–æ–º–µ–¥–∏–π–Ω—ã—Ö —Ñ–∏–ª—å–º–∞—Ö...",
        "emoji": "üòÇ"
    },
    "horror": {
        "name": "–£–∂–∞—Å—ã", 
        "prompt": "–¢—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Ö–æ—Ä—Ä–æ—Ä-—Ñ–∏–ª—å–º–∞–º...",
        "emoji": "üëª"
    },
    "drama": {
        "name": "–î—Ä–∞–º–∞",
        "prompt": "–¢—ã –∑–Ω–∞—Ç–æ–∫ –¥—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–∏–Ω–æ...",
        "emoji": "üé≠"
    },
    "sci_fi": {
        "name": "–ù–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞",
        "prompt": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –Ω–∞—É—á–Ω–æ–π —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–µ...",
        "emoji": "üöÄ"
    },
    "action": {
        "name": "–ë–æ–µ–≤–∏–∫",
        "prompt": "–¢—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –±–æ–µ–≤–∏–∫–∞–º...",
        "emoji": "üí•"
    }
}

class ChatMessage(BaseModel):
    role: str
    content: str

class ChatRequest(BaseModel):
    messages: List[ChatMessage]
    selected_genres: List[str]
    session_id: Optional[str] = None


class StartChatRequest(BaseModel):
    selected_genres: List[str]

def create_system_prompt(selected_genres: List[str]) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç"""
    if not selected_genres:
        return "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ñ–∏–ª—å–º–∞–º. –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –∫–∏–Ω–æ."
    
    base_prompt = "–¢—ã –∫–∏–Ω–æ–ø–æ–º–æ—â–Ω–∏–∫ —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –∂–∞–Ω—Ä–∞—Ö:\n\n"
    
    for genre in selected_genres:
        if genre in GENRE_PROMPTS:
            base_prompt += f"‚Ä¢ {GENRE_PROMPTS[genre]['prompt']}\n\n"
    
    base_prompt += "–°–æ—á–µ—Ç–∞–π —Å—Ç–∏–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤ –≤ —Å–≤–æ–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö. "
    base_prompt += "–û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –∂–∞–Ω—Ä–æ–≤—ã–º–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º–∏."
    
    return base_prompt

@app.post("/api/chat/start")
async def start_chat(request: StartChatRequest):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –∂–∞–Ω—Ä–∞–º–∏"""
    try:
        if not request.selected_genres:
            raise HTTPException(status_code=400, detail="No genres selected")
        
        system_prompt = create_system_prompt(request.selected_genres)
        
        return {
            "success": True,
            "system_prompt": system_prompt,
            "selected_genres": request.selected_genres,
            "message": f"–ß–∞—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å {len(request.selected_genres)} –∂–∞–Ω—Ä–∞–º–∏"
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


def cleanup_old_sessions(days=7):
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞"""
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    
    cutoff_date = (datetime.utcnow() - timedelta(days=days)).isoformat()
    c.execute('DELETE FROM sessions WHERE last_activity < ?', (cutoff_date,))
    
    deleted_count = c.rowcount
    conn.commit()
    conn.close()
    
    # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    if deleted_count > 0:
        conn = sqlite3.connect(DB_PATH)
        conn.execute("VACUUM")  # –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ
        conn.close()
    
    return deleted_count


@app.post("/api/chat")
async def chat(request: ChatRequest):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —á–∞—Ç–∞"""
    try:
        system_prompt = create_system_prompt(request.selected_genres)
        
        session_id = request.session_id or str(uuid.uuid4())
        session_data = load_session(session_id)
        if not session_data:
            session_data = {
                'selected_genres': request.selected_genres,
                'messages': [],
                'created_at': datetime.utcnow().isoformat(),
                'last_activity': datetime.utcnow().isoformat()
            }
        
        messages_with_system = [
            {"role": "system", "content": system_prompt}
        ] + [msg.dict() for msg in request.messages] + session_data['messages']
        
        if len(session_data['messages']) > 40:
            session_data['messages'] = session_data['messages'][-20:]
        
        # ... –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ ...
        
        # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ —Å—Ä–∞–∑—É –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        save_session(session_id, session_data)
        
        # ‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π
        if random.random() < 0.1:  # 10% chance to cleanup
            cleanup_old_sessions(days=3)
        
        response = requests.post(
            "https://api.venice.ai/api/v1/chat/completions",
            headers={
                "Authorization": f"Bearer {os.getenv('VENICE_API_KEY')}",
                "HTTP-Referer": "https://aifetish.xyz",
                "X-Title": "Film AI Assistant",
                "Content-Type": "application/json"
            },
            json={
                "model": "venice-uncensored",
                "messages": messages_with_system,
                "temperature": 0.7,
                "max_tokens": 1000
            },
            timeout=30
        )
        
        if response.status_code != 200:
            raise HTTPException(status_code=response.status_code, 
                              detail=f"OpenRouter API error: {response.text}")
        
        response_data = response.json()
        ai_response = response_data['choices'][0]['message']['content']
        
        return {"response": ai_response, "session_id": session_id}
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/genres")
async def get_genres_info():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∂–∞–Ω—Ä–∞—Ö"""
    return {
        "available_genres": {
            genre: {
                "name": info["name"],
                "emoji": info["emoji"],
                "description": info["prompt"][:100] + "..."
            }
            for genre, info in GENRE_PROMPTS.items()
        }
    }


@app.get("/debug/db")
async def debug_db():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        c.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = c.fetchall()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã sessions –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        sessions_exists = any('sessions' in table for table in tables)
        sessions_structure = None
        
        if sessions_exists:
            c.execute("PRAGMA table_info(sessions)")
            sessions_structure = c.fetchall()
        
        conn.close()
        
        return {
            "db_path": DB_PATH,
            "tables": tables,
            "sessions_exists": sessions_exists,
            "sessions_structure": sessions_structure
        }
        
    except Exception as e:
        return {"error": str(e)}

@app.get("/api/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã API"""
    return {"status": "ok", "message": "API is working"}